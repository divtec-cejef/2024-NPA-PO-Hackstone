{"ast":null,"code":"import Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport io from \"socket.io-client\";\nexport default {\n  components: {\n    Case_1_Attaquant_Attaque,\n    Case_2_Attaquant_Attaque,\n    Case_3_Attaquant_Attaque\n  },\n  props: {\n    readers: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      card: {},\n      readerID: null\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      let {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        // Nettoie readerID pour enlever les caractères non numériques\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\n\n        console.log(\"Cleaned readerID:\", readerID); // Vérifie la valeur nettoyée\n\n        this.card = card;\n        this.card.image = card.image;\n        this.readerID = readerID;\n\n        // Convertir readerID en nombre\n        const readerIndex = this.readers.findIndex(r => r.id === Number(readerID));\n        console.log(\"Reader Index:\", readerIndex); // Vérifie l'index trouvé\n\n        let newReaders = [...this.readers]; // Copie des readers\n        console.log(\"nouveau reader\", newReaders);\n        this.$emit('update-readers', newReaders);\n        console.log(\"this.reader, \", this.readers);\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Case_1_Attaquant_Attaque","Case_2_Attaquant_Attaque","Case_3_Attaquant_Attaque","io","components","props","readers","type","Array","required","data","card","readerID","mounted","socket","on","replace","console","log","image","readerIndex","findIndex","r","id","Number","newReaders","$emit"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"readers[2].id\" :image=\"readers[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"readers[3].id\" :image=\"readers[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"readers[5].id\" :image=\"readers[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  props: {\r\n    readers: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      card: {},\r\n      readerID: null\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n        console.log(\"Cleaned readerID:\", readerID); // Vérifie la valeur nettoyée\r\n\r\n        this.card = card;\r\n        this.card.image = card.image;\r\n        this.readerID = readerID;\r\n\r\n        // Convertir readerID en nombre\r\n        const readerIndex = this.readers.findIndex(r => r.id === Number(readerID));\r\n        console.log(\"Reader Index:\", readerIndex); // Vérifie l'index trouvé\r\n\r\n        let newReaders = [...this.readers]; // Copie des readers\r\n        console.log(\"nouveau reader\", newReaders);\r\n        this.$emit('update-readers', newReaders);\r\n        console.log(\"this.reader, \", this.readers);\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":"AASA,OAAOA,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,EAAC,MAAO,kBAAkB;AAEjC,eAAe;EACbC,UAAU,EAAE;IACVJ,wBAAwB;IACxBC,wBAAwB;IACxBC;EACF,CAAC;EACDG,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC,CAAC;MACRC,QAAQ,EAAE;IACZ;EACF,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,MAAK,GAAIX,EAAE,CAAC,uBAAuB,CAAC;IAEzC,IAAI,CAACW,MAAM,CAACC,EAAE,CAAC,UAAU,EAAGL,IAAI,IAAK;MACnC,IAAI;QAAEE,QAAQ;QAAED;MAAK,IAAID,IAAI;MAC7B,IAAIC,IAAI,CAACJ,IAAG,KAAM,SAAS,EAAE;QAE3B;QACAK,QAAO,GAAIA,QAAQ,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;;QAExCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,QAAQ,CAAC,EAAE;;QAE5C,IAAI,CAACD,IAAG,GAAIA,IAAI;QAChB,IAAI,CAACA,IAAI,CAACQ,KAAI,GAAIR,IAAI,CAACQ,KAAK;QAC5B,IAAI,CAACP,QAAO,GAAIA,QAAQ;;QAExB;QACA,MAAMQ,WAAU,GAAI,IAAI,CAACd,OAAO,CAACe,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMC,MAAM,CAACZ,QAAQ,CAAC,CAAC;QAC1EK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEE,WAAW,CAAC,EAAE;;QAE3C,IAAIK,UAAS,GAAI,CAAC,GAAG,IAAI,CAACnB,OAAO,CAAC,EAAE;QACpCW,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEO,UAAU,CAAC;QACzC,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAED,UAAU,CAAC;QACxCR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAACZ,OAAO,CAAC;MAC5C,OAAO;QACLW,OAAO,CAACC,GAAG,CAAC,0BAA0BP,IAAI,CAACJ,IAAI,sDAAsD,CAAC;MACxG;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}