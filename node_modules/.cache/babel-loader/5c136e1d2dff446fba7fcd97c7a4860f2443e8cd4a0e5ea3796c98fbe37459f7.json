{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n//Récupère les valeurs présentes dans le fichier json\nlet cards = [];\ncards = require('../cards.json');\nconst data = {\n  cards\n};\n\n//Met les valeurs contenues dans le fichier json dans une liste\nconst cartes = data.cards.cards;\n\n/**\r\n * Génère le deck de l'attaquant\r\n * @returns le deck de l'attaquant\r\n */\nfunction genererDeckAttaque() {\n  let cartesAttaque = [];\n  for (let i = 0; i < cartes.length; i++) {\n    if (cartes[i].type === \"attaque\") {\n      cartesAttaque.push(cartes[i]);\n      if (cartes[i].level === \"bas niveau\") {\n        cartesAttaque.push(cartes[i]);\n        if (cartes[i].name !== \"Virus\" && cartes[i].name !== \"Cheval de troie\") {\n          cartesAttaque.push(cartes[i]);\n        }\n      }\n    }\n  }\n  cartesAttaque.splice(0, 1);\n  return cartesAttaque;\n}\n\n/**\r\n * Génère le deck du défenseur\r\n * @returns le deck du défenseur\r\n */\nfunction genererDeckDefense() {\n  let cartesDefense = [];\n  for (let i = 0; i < cartes.length; i++) {\n    if (cartes[i].type === \"défense\") {\n      cartesDefense.push(cartes[i]);\n      if (cartes[i].level === \"bas niveau\") {\n        cartesDefense.push(cartes[i]);\n        if (cartes[i].name === \"Antivirus\") {\n          cartesDefense.push(cartes[i]);\n        }\n      }\n    }\n  }\n  cartesDefense.splice(0, 1);\n  return cartesDefense;\n}\n\n/**\r\n * Génère un nombre aléatoire\r\n * @param min nombre minimal\r\n * @param max nombre maximal\r\n * @returns un nombre aléatoire\r\n */\nfunction getNombreAleatoire(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\r\n * Pioche jusqu'à ce que l'ordinateur ait 5 cartes dans sa main, s'il en a déjà 5, il en pioche une seule\r\n * @param cartesDeck cartes présentent dans le deck\r\n * @param cartesEnMain cartes présentes dans la main\r\n */\nfunction piocher(cartesDeck, cartesEnMain) {\n  if (cartesEnMain.length >= 5) {\n    let index = getNombreAleatoire(0, cartesDeck.length - 1);\n    cartesEnMain.push(cartesDeck[index]);\n    cartesDeck.splice(index, 1);\n  }\n  while (cartesEnMain.length < 5) {\n    let index = getNombreAleatoire(0, cartesDeck.length - 1);\n    cartesEnMain.push(cartesDeck[index]);\n    cartesDeck.splice(index, 1);\n  }\n}\nlet cartesDefense = genererDeckDefense();\nlet cartesAttaque = genererDeckAttaque();\nlet cartesEnMains = [];\nconsole.log(cartesAttaque.length);\npiocher(cartesAttaque, cartesEnMains);\npiocher(cartesAttaque, cartesEnMains);\nconsole.log(cartesEnMains);\nconsole.log(cartesAttaque.length);\nconsole.log(cartesDefense.length);\nconsole.log(cartesAttaque);","map":{"version":3,"names":["cards","require","data","cartes","genererDeckAttaque","cartesAttaque","i","length","type","push","level","name","splice","genererDeckDefense","cartesDefense","getNombreAleatoire","min","max","Math","floor","random","piocher","cartesDeck","cartesEnMain","index","cartesEnMains","console","log"],"sources":["C:/Users/courluc/IdeaProjects/2024-NPA-PO-Hackstone/src/cartes.js"],"sourcesContent":["//Récupère les valeurs présentes dans le fichier json\r\nlet cards = []\r\ncards= require('../cards.json');\r\nconst data = {\r\n    cards\r\n};\r\n\r\n//Met les valeurs contenues dans le fichier json dans une liste\r\nconst cartes = data.cards.cards;\r\n\r\n\r\n/**\r\n * Génère le deck de l'attaquant\r\n * @returns le deck de l'attaquant\r\n */\r\nfunction genererDeckAttaque () {\r\n    let cartesAttaque = [];\r\n    for (let i = 0; i < cartes.length; i++) {\r\n\r\n        if (cartes[i].type === \"attaque\") {\r\n            cartesAttaque.push(cartes[i]);\r\n\r\n            if (cartes[i].level === \"bas niveau\") {\r\n                cartesAttaque.push(cartes[i])\r\n\r\n                if (cartes[i].name !== \"Virus\" && cartes[i].name !== \"Cheval de troie\") {\r\n                    cartesAttaque.push(cartes[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cartesAttaque.splice(0, 1);\r\n    return cartesAttaque;\r\n}\r\n\r\n/**\r\n * Génère le deck du défenseur\r\n * @returns le deck du défenseur\r\n */\r\nfunction genererDeckDefense() {\r\n    let cartesDefense = [];\r\n    for (let i = 0; i < cartes.length; i++) {\r\n\r\n        if (cartes[i].type === \"défense\") {\r\n            cartesDefense.push(cartes[i])\r\n\r\n            if (cartes[i].level === \"bas niveau\") {\r\n                cartesDefense.push(cartes[i])\r\n\r\n                if (cartes[i].name === \"Antivirus\") {\r\n                    cartesDefense.push(cartes[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cartesDefense.splice(0, 1);\r\n    return cartesDefense;\r\n}\r\n\r\n/**\r\n * Génère un nombre aléatoire\r\n * @param min nombre minimal\r\n * @param max nombre maximal\r\n * @returns un nombre aléatoire\r\n */\r\nfunction getNombreAleatoire(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Pioche jusqu'à ce que l'ordinateur ait 5 cartes dans sa main, s'il en a déjà 5, il en pioche une seule\r\n * @param cartesDeck cartes présentent dans le deck\r\n * @param cartesEnMain cartes présentes dans la main\r\n */\r\nfunction piocher(cartesDeck, cartesEnMain) {\r\n    if (cartesEnMain.length >= 5 ) {\r\n        let index = getNombreAleatoire(0, cartesDeck.length - 1);\r\n        cartesEnMain.push(cartesDeck[index]);\r\n        cartesDeck.splice(index, 1);\r\n    }\r\n    while (cartesEnMain.length < 5){\r\n        let index = getNombreAleatoire(0, cartesDeck.length-1);\r\n        cartesEnMain.push(cartesDeck[index]);\r\n        cartesDeck.splice(index, 1);\r\n    }\r\n}\r\n\r\nlet cartesDefense = genererDeckDefense();\r\nlet cartesAttaque = genererDeckAttaque();\r\nlet cartesEnMains = [];\r\nconsole.log(cartesAttaque.length);\r\npiocher(cartesAttaque, cartesEnMains);\r\npiocher(cartesAttaque, cartesEnMains);\r\nconsole.log(cartesEnMains);\r\nconsole.log(cartesAttaque.length);\r\nconsole.log(cartesDefense.length);\r\nconsole.log(cartesAttaque);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}