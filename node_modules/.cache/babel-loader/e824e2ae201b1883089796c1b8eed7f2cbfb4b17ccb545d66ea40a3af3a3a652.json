{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport io from \"socket.io-client\";\nimport fonctionnaliteesAttaque from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\nimport { cartesAttaque } from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\nexport default {\n  components: {\n    Case_1_Attaquant_Attaque,\n    Case_2_Attaquant_Attaque,\n    Case_3_Attaquant_Attaque\n  },\n  props: {\n    readers: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      card: {},\n      localReaders: [...this.readers]\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      let {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        // Nettoie readerID pour enlever les caractères non numériques\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\n\n        const reader = this.localReaders.findIndex(r => r.id === Number(readerID));\n        if (reader === 2 || reader === 3 || reader === 5) {\n          console.log(\"image \", reader.image);\n          if (reader.image === null) {\n            this.localReaders[reader] = {\n              ...this.localReaders[reader],\n              image: card.image\n            };\n            this.localReaders[reader] = {\n              ...this.localReaders[reader],\n              name: card.name\n            };\n            fonctionnaliteesAttaque.methods.arriveeAnonymous(card, this.localReaders);\n            if (cartesAttaque.length === 0) {\n              cartesAttaque.push(card);\n            } else {\n              let exist = false;\n              for (let i = 0; i < cartesAttaque.length; i++) {\n                if (cartesAttaque[i].uid.includes(card.uid)) {\n                  exist = true;\n                  break;\n                }\n              }\n              if (!exist) cartesAttaque.push(card);\n            }\n            let newReaders = [...this.localReaders]; // Copie des readers\n            this.$emit('update-readers', newReaders);\n            console.log(\"Cartes en attaque\", cartesAttaque);\n          }\n        }\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Case_1_Attaquant_Attaque","Case_2_Attaquant_Attaque","Case_3_Attaquant_Attaque","io","fonctionnaliteesAttaque","cartesAttaque","components","props","readers","type","Array","required","data","card","localReaders","mounted","socket","on","readerID","replace","reader","findIndex","r","id","Number","console","log","image","name","methods","arriveeAnonymous","length","push","exist","i","uid","includes","newReaders","$emit"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"readers[2].id\" :image=\"readers[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"readers[3].id\" :image=\"readers[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"readers[5].id\" :image=\"readers[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\nimport fonctionnaliteesAttaque from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\r\nimport {cartesAttaque} from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  props: {\r\n    readers: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      card: {},\r\n      localReaders: [...this.readers]\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n        const reader = this.localReaders.findIndex(r => r.id === Number(readerID));\r\n\r\n        if (reader === 2 || reader === 3 || reader === 5) {\r\n          console.log(\"image \", reader.image)\r\n          if (reader.image === null) {\r\n            this.localReaders[reader] = {...this.localReaders[reader], image: card.image}\r\n            this.localReaders[reader] = {...this.localReaders[reader], name: card.name}\r\n\r\n            fonctionnaliteesAttaque.methods.arriveeAnonymous(card, this.localReaders);\r\n            if (cartesAttaque.length === 0) {\r\n              cartesAttaque.push(card)\r\n            } else {\r\n              let exist = false;\r\n              for (let i = 0; i < cartesAttaque.length; i++) {\r\n                if (cartesAttaque[i].uid.includes(card.uid)) {\r\n                  exist = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!exist)\r\n                cartesAttaque.push(card);\r\n            }\r\n            let newReaders = [...this.localReaders]; // Copie des readers\r\n            this.$emit('update-readers', newReaders);\r\n            console.log(\"Cartes en attaque\", cartesAttaque);\r\n          }\r\n        }\r\n\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}