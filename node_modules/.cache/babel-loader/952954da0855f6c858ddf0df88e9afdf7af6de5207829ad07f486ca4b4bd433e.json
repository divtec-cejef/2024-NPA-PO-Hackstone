{"ast":null,"code":"import CaseAttaquant_attaque from \"@/components/plateauAttaque/Case_attaquant/CaseAttaquant_attaque.vue\";\nimport CaseDefenseur_attaque from \"@/components/plateauAttaque/Case_defenseur/CaseDefenseur_attaque.vue\";\nimport TourAttaquant_attaque from \"@/components/plateauAttaque/TourAttaquant_attaque.vue\";\nimport PVDefenseur_attaque from \"@/components/plateauAttaque/PVDefenseur_attaque.vue\";\nimport io from \"socket.io-client\";\nimport fonctionnaliteesAttaque from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\nconsole.log(\"C'est la le début ?\");\nexport default {\n  components: {\n    CaseAttaquant_attaque,\n    CaseDefenseur_attaque,\n    TourAttaquant_attaque,\n    PVDefenseur_attaque\n  },\n  data() {\n    return {\n      readers: [{\n        id: 1,\n        name: 'Reader 1',\n        image: null\n      }, {\n        id: 2,\n        name: 'Reader 2',\n        image: null\n      }, {\n        id: 3,\n        name: 'Reader 3',\n        image: null\n      }, {\n        id: 4,\n        name: 'Reader 4',\n        image: null\n      }, {\n        id: 5,\n        name: 'Reader 5',\n        image: null\n      }, {\n        id: 6,\n        name: 'Reader 6',\n        image: null\n      }, {\n        id: 7,\n        name: 'Reader 7',\n        image: null\n      }],\n      socket: null\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      const {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        let mappedReaderID = null;\n        switch (parseInt(readerID)) {\n          case 1:\n            mappedReaderID = 1; // Capteur 1 -> Reader 1\n            break;\n          case 2:\n            mappedReaderID = 2; // Capteur 2 -> Reader 2\n            break;\n          case 3:\n            mappedReaderID = 5; // Capteur 3 -> Reader 5\n            break;\n          case 4:\n            mappedReaderID = 6; // Capteur 4 -> Reader 6\n            break;\n          case 5:\n            mappedReaderID = 3; // Capteur 5 -> Reader 3\n            break;\n          case 6:\n            mappedReaderID = 7; // Capteur 6 -> Reader 7\n            break;\n          case 7:\n            mappedReaderID = 4; // Capteur 7 -> Reader 4\n            break;\n        }\n        console.log('Mapped Reader ID:', mappedReaderID);\n        const reader = this.readers.find(r => r.id === mappedReaderID);\n        if (!reader) {\n          console.log(`No reader found with mapped ID ${mappedReaderID}.`);\n        } else if (reader.id === 3) {\n          let chien = this.readers;\n          fonctionnaliteesAttaque.methods.attaquer(card, chien);\n          alert(\"Haha je t'attaque !\");\n          //console.log(\"Haha je t'attaque\");\n        }\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["CaseAttaquant_attaque","CaseDefenseur_attaque","TourAttaquant_attaque","PVDefenseur_attaque","io","fonctionnaliteesAttaque","console","log","components","data","readers","id","name","image","socket","mounted","on","readerID","card","type","mappedReaderID","parseInt","reader","find","r","chien","methods","attaquer","alert"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\PlateauFinaleAttaquant.vue"],"sourcesContent":["<template>\r\n  <div class=\"plateau-finale-attaque\">\r\n    <!-- PV du défenseur -->\r\n    <PVDefenseur_attaque />\r\n\r\n    <!-- Case de la défense -->\r\n    <CaseDefenseur_attaque :readers=\"readers\" :socket=\"socket\" />\r\n\r\n    <img src=\"../../img/ligne.png\" alt=\"Ligne\" class=\"line\" id=\"ligne_attaque\">\r\n\r\n    <!-- Compteurs de l'attaque -->\r\n    <TourAttaquant_attaque :socket=\"socket\" />\r\n\r\n    <!-- Case de l'attaque -->\r\n    <CaseAttaquant_attaque :readers=\"readers\" :socket=\"socket\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CaseAttaquant_attaque from \"@/components/plateauAttaque/Case_attaquant/CaseAttaquant_attaque.vue\";\r\nimport CaseDefenseur_attaque from \"@/components/plateauAttaque/Case_defenseur/CaseDefenseur_attaque.vue\";\r\nimport TourAttaquant_attaque from \"@/components/plateauAttaque/TourAttaquant_attaque.vue\";\r\nimport PVDefenseur_attaque from \"@/components/plateauAttaque/PVDefenseur_attaque.vue\";\r\nimport io from \"socket.io-client\";\r\nimport fonctionnaliteesAttaque from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\r\nconsole.log(\"C'est la le début ?\")\r\nexport default {\r\n  components: {\r\n    CaseAttaquant_attaque,\r\n    CaseDefenseur_attaque,\r\n    TourAttaquant_attaque,\r\n    PVDefenseur_attaque\r\n  },\r\n  data() {\r\n    return {\r\n      readers: [\r\n        {id: 1, name: 'Reader 1', image: null},\r\n        {id: 2, name: 'Reader 2', image: null},\r\n        {id: 3, name: 'Reader 3', image: null},\r\n        {id: 4, name: 'Reader 4', image: null},\r\n        {id: 5, name: 'Reader 5', image: null},\r\n        {id: 6, name: 'Reader 6', image: null},\r\n        {id: 7, name: 'Reader 7', image: null},\r\n      ],\r\n      socket: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n    this.socket.on('rfidData', (data) => {\r\n      const { readerID, card } = data;\r\n\r\n      if (card.type === 'attaque') {\r\n        let mappedReaderID = null;\r\n        switch (parseInt(readerID)) {\r\n          case 1:\r\n            mappedReaderID = 1; // Capteur 1 -> Reader 1\r\n            break;\r\n          case 2:\r\n            mappedReaderID = 2; // Capteur 2 -> Reader 2\r\n            break;\r\n          case 3:\r\n            mappedReaderID = 5; // Capteur 3 -> Reader 5\r\n            break;\r\n          case 4:\r\n            mappedReaderID = 6; // Capteur 4 -> Reader 6\r\n            break;\r\n          case 5:\r\n            mappedReaderID = 3; // Capteur 5 -> Reader 3\r\n            break;\r\n          case 6:\r\n            mappedReaderID = 7; // Capteur 6 -> Reader 7\r\n            break;\r\n          case 7:\r\n            mappedReaderID = 4; // Capteur 7 -> Reader 4\r\n            break;\r\n        }\r\n\r\n        console.log('Mapped Reader ID:', mappedReaderID);\r\n\r\n        const reader = this.readers.find(r => r.id === mappedReaderID);\r\n\r\n        if (!reader) {\r\n          console.log(`No reader found with mapped ID ${mappedReaderID}.`);\r\n        } else if (reader.id === 3) {\r\n          let chien = this.readers;\r\n          fonctionnaliteesAttaque.methods.attaquer(card, chien);\r\n          alert(\"Haha je t'attaque !\");\r\n          //console.log(\"Haha je t'attaque\");\r\n        }\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.line {\r\n  margin-top: 50px;\r\n  margin-bottom: 50px;\r\n  max-width: 100%;\r\n  height: auto;\r\n  mix-blend-mode: lighten;\r\n  opacity: 0.9;\r\n}\r\n\r\n#ligne_attaque.line {\r\n  rotate: 180deg;\r\n}\r\n\r\n.plateau-finale-attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}