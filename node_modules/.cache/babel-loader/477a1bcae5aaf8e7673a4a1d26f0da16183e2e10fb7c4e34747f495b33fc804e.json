{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"bottomReaders_attaque\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Case_1_Attaquant_Attaque = _resolveComponent(\"Case_1_Attaquant_Attaque\");\n  const _component_Case_2_Attaquant_Attaque = _resolveComponent(\"Case_2_Attaquant_Attaque\");\n  const _component_Case_3_Attaquant_Attaque = _resolveComponent(\"Case_3_Attaquant_Attaque\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_Case_1_Attaquant_Attaque, {\n    id: $props.readers[2].id,\n    image: $props.readers[2].image\n  }, null, 8, [\"id\", \"image\"]), _createVNode(_component_Case_2_Attaquant_Attaque, {\n    id: $props.readers[3].id,\n    image: $props.readers[3].image\n  }, null, 8, [\"id\", \"image\"]), _createVNode(_component_Case_3_Attaquant_Attaque, {\n    id: $props.readers[5].id,\n    image: $props.readers[5].image\n  }, null, 8, [\"id\", \"image\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_Case_1_Attaquant_Attaque","id","$props","readers","image","_component_Case_2_Attaquant_Attaque","_component_Case_3_Attaquant_Attaque"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"readers[2].id\" :image=\"readers[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"readers[3].id\" :image=\"readers[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"readers[5].id\" :image=\"readers[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\nimport fonctionnaliteesAttaque from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\r\nimport {cartesAttaque} from \"@/components/plateauAttaque/fonctionnaliteesAttaque.vue\";\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  props: {\r\n    readers: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      card: {},\r\n      localReaders: [...this.readers]\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n        const reader = this.localReaders.findIndex(r => r.id === Number(readerID));\r\n\r\n        if (reader === 2 || reader === 3 || reader === 5){\r\n          this.localReaders[reader] = { ...this.localReaders[reader], image: card.image}\r\n          this.localReaders[reader] = { ...this.localReaders[reader], name: card.name}\r\n          fonctionnaliteesAttaque.methods.arriveeAnonymous(card, this.localReaders);\r\n          if(cartesAttaque.length === 0){\r\n            cartesAttaque.push(card)\r\n          }else {\r\n            let exist = false;\r\n            for (let i = 0; i < cartesAttaque.length; i++) {\r\n              if (cartesAttaque[i].uid.includes(card.uid)) {\r\n                exist = true;\r\n                break;\r\n              }\r\n            }\r\n            if (!exist)\r\n              cartesAttaque.push(card);\r\n          }\r\n          let newReaders = [...this.localReaders]; // Copie des readers\r\n          this.$emit('update-readers', newReaders);\r\n          console.log(\"Cartes en attaque\", cartesAttaque);\r\n        }\r\n\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAuB;;;;;uBAAlCC,mBAAA,CAIM,OAJNC,UAIM,GAHJC,YAAA,CAAyEC,mCAAA;IAA9CC,EAAE,EAAEC,MAAA,CAAAC,OAAO,IAAIF,EAAE;IAAGG,KAAK,EAAEF,MAAA,CAAAC,OAAO,IAAIC;gCACjEL,YAAA,CAAyEM,mCAAA;IAA9CJ,EAAE,EAAEC,MAAA,CAAAC,OAAO,IAAIF,EAAE;IAAGG,KAAK,EAAEF,MAAA,CAAAC,OAAO,IAAIC;gCACjEL,YAAA,CAAyEO,mCAAA;IAA9CL,EAAE,EAAEC,MAAA,CAAAC,OAAO,IAAIF,EAAE;IAAGG,KAAK,EAAEF,MAAA,CAAAC,OAAO,IAAIC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}