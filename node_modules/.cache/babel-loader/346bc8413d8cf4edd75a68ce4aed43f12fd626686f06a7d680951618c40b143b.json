{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Importation du fichier JSON des CARTES\nlet carteEnJeu = [];\nlet pv = 5;\nlet pvAnonymous = 2;\nlet pvSuperAntivirus = 2;\nlet cardsData = require('../../../cards.json');\nlet dejaPosee = false;\nconst DECK = {\n  cardsData\n};\nconst CARTES = DECK.cardsData.cards;\nexport default {\n  methods: {\n    /**\r\n     * Génère le deck du défenseur à partir d'un fichier json\r\n     * @returns cartesAttaque cartes présentent dans le deck\r\n     */\n    genererDeckDefense() {\n      let cartesAttaque = [];\n      for (let i = 0; i < CARTES.length; i++) {\n        if (CARTES[i].type === 'défense') {\n          //Retrouve le nombre de fois qu'une carte est présente dans le deck grâce à son nombre d'ID\n          for (let j = 0; j < CARTES[i].uid.length; j++) cartesAttaque.push(CARTES[i]);\n        }\n      }\n      return cartesAttaque;\n    },\n    /**\r\n     * Génération d'un nombre entier aléatoire\r\n     * @param min fourchette minimale\r\n     * @param max fourchette maximale\r\n     * @returns {*} nombre entier aléatoire\r\n     */\n    getNombreAleatoire(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    /**\r\n     * Pioche 5 cartes au hasard, si l'ordinateur possède déjà 5 cartes dans sa main, en pioche une seule,\r\n     * ensuite retire les cartes piochées du deck\r\n     * @param cartesDeck cartes présentent dans le deck\r\n     * @param cartesEnMain cartes présentent dans la main de l'ordinateur\r\n     */\n    piocher(cartesDeck, cartesEnMain) {\n      if (cartesEnMain.length >= 5) {\n        let index = this.getNombreAleatoire(0, cartesDeck.length - 1);\n        cartesEnMain.push(cartesDeck[index]);\n        cartesDeck.splice(index, 1);\n      }\n      while (cartesEnMain.length < 5) {\n        let index = this.getNombreAleatoire(0, cartesDeck.length - 1);\n        cartesEnMain.push(cartesDeck[index]);\n        cartesDeck.splice(index, 1);\n      }\n      cartesEnMain.splice(cartesEnMain.length, 1);\n    },\n    /**\r\n     * Effectue toutes les actions nécessaires au début de n'importe quel tour (excepté le premier)\r\n     * @param cartesDeck cartes présentent dans le deck\r\n     * @param cartesEnMains cartes présentent dans la main de l'ordinateur\r\n     */\n    DebutTour(cartesDeck, cartesEnMains) {\n      for (let i = 0; i < cartesDeck.length; i++) {\n        if (cartesDeck[i].name === \"Stockage\") {\n          cartesDeck.splice(i, 1);\n        }\n      }\n      this.piocher(cartesDeck, cartesEnMains);\n    },\n    /**\r\n     * Permet à l'ordinateur de remplir son terrain grâce aux cartes qu'il a dans sa main\r\n     * @param cartesEnMains carte dans la main de l'ordinateur\r\n     * @param reader lecteurs sur lesquels les cartes sont posées\r\n     */\n    poserCarte(cartesEnMains, reader) {\n      //Pose une carte seulement s'il n'y en a pas une de déjà posé\n      if (reader.image === null) {\n        let index = 0;\n        let cartePosee;\n\n        //Empêche la redondance de données d'être la première carte posée sur le terrain\n        // afin qu'elle puisse copier une carte déjà présente\n        do {\n          index = this.getNombreAleatoire(0, cartesEnMains.length - 1);\n          cartePosee = cartesEnMains[index];\n        } while (cartePosee.name === \"Redondance de données\" && carteEnJeu.length === 0);\n\n        //La carte redondance de données devient une copie de la carte sur la case de gauche.\n        if (cartePosee.name === \"Redondance de données\") {\n          alert(\"Redondance de données\");\n          cartePosee = carteEnJeu[0];\n        }\n        reader.image = cartePosee.image;\n        reader.name = cartePosee.name;\n        cartesEnMains.splice(index, 1);\n        carteEnJeu.push(cartePosee);\n      }\n    },\n    /**\r\n     *Permet à l'utilisateur d'attaquer les cartes de l'ordinateur,\r\n     * les attaques se font automatiquement sur la bonne carte\r\n     * @param card carte qui va attaquer\r\n     * @param readers lecteur sur lesquelles les cartes sont posées\r\n     */\n    attaquer(card, readers) {\n      let counterCarteEnJeu = [];\n      let carteDefendu = false;\n      //Fonction permettant d'arrêter les deux boucles à un moment donné\n      outerLoop:\n      //Boucle passant sur chaque case de l'ordinateur\n      for (let j = 0; j < carteEnJeu.length; j++) {\n        //Liste des cartes qui contrent les cartes présentent sur le jeu\n        counterCarteEnJeu = carteEnJeu[j].counter;\n\n        //Boucle passant tous les contre des cartes\n        for (let i = 0; i < counterCarteEnJeu.length; i++) {\n          //Test si la carte qui attaque à un contre présent sur le terrain\n          if (counterCarteEnJeu.includes(card.name)) {\n            carteDefendu = true;\n            console.log(\"Cartes en jeu\", carteEnJeu[j]);\n            console.log(\"carte scannee\", card);\n            console.log(\"Reader \", readers);\n            //Retrouve les cases sur lesquelles les cartes sont présentes\n            let carte = readers.find(cartes => cartes.name === carteEnJeu[j].name);\n            let carte2 = readers.find(caca2 => caca2.name === card.name);\n\n            //Retire le nom et l'image de la carte détruite de leur case\n            //et détruit l'Anonymous et le super-antivirus uniquement s'ils ont déjà été attaqués une fois\n            if (carte.name === \"Super-antivirus\" && pvSuperAntivirus === 1 || carte.name !== \"Super-antivirus\") {\n              carte.image = null;\n              carte.name = null;\n              console.log(\"supprime la carte\", carteEnJeu);\n              carteEnJeu.splice(j, 1);\n              console.log(\"Carte supprime\", carteEnJeu);\n            } else pvSuperAntivirus = 1;\n            if (carte2.name === \"Anonymous\" && pvAnonymous === 1 || carte2.name !== \"Anonymous\") {\n              carte2.image = null;\n              carte2.name = null;\n            } else pvAnonymous = 1;\n            //Termine la fonction une fois qu'une carte a été détruite\n            break outerLoop;\n          }\n        }\n      }\n      if (!carteDefendu) {\n        pv--;\n        alert(pv);\n      }\n      if (pv === 0) {\n        alert(\"Bravo\");\n      }\n    },\n    arriveeAnonymous(card, reader) {\n      if (card.name === \"Anonymous\" && !dejaPosee) {\n        dejaPosee = true;\n        reader[0].name = null;\n        reader[0].image = null;\n        reader[1].name = null;\n        reader[1].image = null;\n        reader[4].name = null;\n        reader[4].image = null;\n        carteEnJeu = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["carteEnJeu","pv","pvAnonymous","pvSuperAntivirus","cardsData","require","dejaPosee","DECK","CARTES","cards","methods","genererDeckDefense","cartesAttaque","i","length","type","j","uid","push","getNombreAleatoire","min","max","Math","floor","random","piocher","cartesDeck","cartesEnMain","index","splice","DebutTour","cartesEnMains","name","poserCarte","reader","image","cartePosee","alert","attaquer","card","readers","counterCarteEnJeu","carteDefendu","outerLoop","counter","includes","console","log","carte","find","cartes","carte2","caca2","arriveeAnonymous"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\fonctionnaliteesAttaque.vue"],"sourcesContent":["<script>\r\n// Importation du fichier JSON des CARTES\r\nlet carteEnJeu = [];\r\nlet pv = 5;\r\nlet pvAnonymous = 2;\r\nlet pvSuperAntivirus = 2;\r\nlet cardsData = require('../../../cards.json');\r\nlet dejaPosee = false;\r\nconst DECK = {\r\n  cardsData\r\n};\r\nconst CARTES = DECK.cardsData.cards;\r\nexport default {\r\n\r\n  methods: {\r\n    /**\r\n     * Génère le deck du défenseur à partir d'un fichier json\r\n     * @returns cartesAttaque cartes présentent dans le deck\r\n     */\r\n    genererDeckDefense() {\r\n      let cartesAttaque = [];\r\n      for (let i = 0; i < CARTES.length; i++) {\r\n        if (CARTES[i].type === 'défense') {\r\n          //Retrouve le nombre de fois qu'une carte est présente dans le deck grâce à son nombre d'ID\r\n          for (let j = 0; j < CARTES[i].uid.length; j++)\r\n            cartesAttaque.push(CARTES[i]);\r\n        }\r\n      }\r\n      return cartesAttaque;\r\n    },\r\n\r\n    /**\r\n     * Génération d'un nombre entier aléatoire\r\n     * @param min fourchette minimale\r\n     * @param max fourchette maximale\r\n     * @returns {*} nombre entier aléatoire\r\n     */\r\n    getNombreAleatoire(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    },\r\n\r\n    /**\r\n     * Pioche 5 cartes au hasard, si l'ordinateur possède déjà 5 cartes dans sa main, en pioche une seule,\r\n     * ensuite retire les cartes piochées du deck\r\n     * @param cartesDeck cartes présentent dans le deck\r\n     * @param cartesEnMain cartes présentent dans la main de l'ordinateur\r\n     */\r\n    piocher(cartesDeck, cartesEnMain) {\r\n      if (cartesEnMain.length >= 5) {\r\n        let index = this.getNombreAleatoire(0, cartesDeck.length - 1);\r\n        cartesEnMain.push(cartesDeck[index]);\r\n        cartesDeck.splice(index, 1);\r\n      }\r\n      while (cartesEnMain.length < 5) {\r\n        let index = this.getNombreAleatoire(0, cartesDeck.length - 1);\r\n        cartesEnMain.push(cartesDeck[index]);\r\n        cartesDeck.splice(index, 1);\r\n      }\r\n      cartesEnMain.splice(cartesEnMain.length, 1);\r\n    },\r\n\r\n    /**\r\n     * Effectue toutes les actions nécessaires au début de n'importe quel tour (excepté le premier)\r\n     * @param cartesDeck cartes présentent dans le deck\r\n     * @param cartesEnMains cartes présentent dans la main de l'ordinateur\r\n     */\r\n    DebutTour(cartesDeck, cartesEnMains) {\r\n      for (let i = 0; i < cartesDeck.length; i++){\r\n        if (cartesDeck[i].name === (\"Stockage\")){\r\n          cartesDeck.splice(i, 1);\r\n        }\r\n      }\r\n      this.piocher(cartesDeck, cartesEnMains);\r\n    },\r\n\r\n    /**\r\n     * Permet à l'ordinateur de remplir son terrain grâce aux cartes qu'il a dans sa main\r\n     * @param cartesEnMains carte dans la main de l'ordinateur\r\n     * @param reader lecteurs sur lesquels les cartes sont posées\r\n     */\r\n    poserCarte(cartesEnMains, reader) {\r\n      //Pose une carte seulement s'il n'y en a pas une de déjà posé\r\n      if (reader.image === null) {\r\n        let index = 0;\r\n        let cartePosee;\r\n\r\n        //Empêche la redondance de données d'être la première carte posée sur le terrain\r\n        // afin qu'elle puisse copier une carte déjà présente\r\n        do {\r\n          index = this.getNombreAleatoire(0, cartesEnMains.length - 1);\r\n          cartePosee = cartesEnMains[index];\r\n        }while (cartePosee.name === \"Redondance de données\" && carteEnJeu.length === 0);\r\n\r\n        //La carte redondance de données devient une copie de la carte sur la case de gauche.\r\n        if(cartePosee.name === \"Redondance de données\") {\r\n          alert(\"Redondance de données\");\r\n          cartePosee = carteEnJeu[0];\r\n        }\r\n\r\n        reader.image = cartePosee.image;\r\n        reader.name = cartePosee.name;\r\n        cartesEnMains.splice(index, 1);\r\n\r\n        carteEnJeu.push(cartePosee);\r\n      }\r\n    },\r\n\r\n    /**\r\n     *Permet à l'utilisateur d'attaquer les cartes de l'ordinateur,\r\n     * les attaques se font automatiquement sur la bonne carte\r\n     * @param card carte qui va attaquer\r\n     * @param readers lecteur sur lesquelles les cartes sont posées\r\n     */\r\n    attaquer(card, readers) {\r\n      let counterCarteEnJeu = [];\r\n      let carteDefendu = false;\r\n      //Fonction permettant d'arrêter les deux boucles à un moment donné\r\n      outerLoop:\r\n          //Boucle passant sur chaque case de l'ordinateur\r\n          for (let j = 0; j < carteEnJeu.length; j++) {\r\n            //Liste des cartes qui contrent les cartes présentent sur le jeu\r\n            counterCarteEnJeu = carteEnJeu[j].counter;\r\n\r\n            //Boucle passant tous les contre des cartes\r\n            for (let i = 0; i < counterCarteEnJeu.length; i++) {\r\n              //Test si la carte qui attaque à un contre présent sur le terrain\r\n              if (counterCarteEnJeu.includes(card.name)) {\r\n                carteDefendu = true;\r\n                console.log(\"Cartes en jeu\", carteEnJeu[j]);\r\n                console.log(\"carte scannee\", card);\r\n                console.log(\"Reader \", readers);\r\n                //Retrouve les cases sur lesquelles les cartes sont présentes\r\n                let carte = readers.find(cartes => cartes.name === carteEnJeu[j].name);\r\n                let carte2 = readers.find(caca2 => caca2.name === card.name);\r\n\r\n                //Retire le nom et l'image de la carte détruite de leur case\r\n                //et détruit l'Anonymous et le super-antivirus uniquement s'ils ont déjà été attaqués une fois\r\n                if ((carte.name === \"Super-antivirus\" && pvSuperAntivirus === 1) || carte.name !== \"Super-antivirus\") {\r\n                  carte.image = null;\r\n                  carte.name = null;\r\n                  console.log(\"supprime la carte\", carteEnJeu)\r\n                  carteEnJeu.splice(j, 1);\r\n                  console.log(\"Carte supprime\", carteEnJeu);\r\n                } else\r\n                  pvSuperAntivirus = 1;\r\n                if ((carte2.name === \"Anonymous\" && pvAnonymous === 1) || carte2.name !== \"Anonymous\") {\r\n                  carte2.image = null;\r\n                  carte2.name = null;\r\n                } else\r\n                  pvAnonymous = 1;\r\n                //Termine la fonction une fois qu'une carte a été détruite\r\n                break outerLoop;\r\n              }\r\n            }\r\n          }\r\n      if (!carteDefendu) {\r\n        pv--;\r\n        alert(pv);\r\n      }\r\n      if (pv === 0){\r\n        alert(\"Bravo\")\r\n      }\r\n    },\r\n    arriveeAnonymous(card, reader) {\r\n      if(card.name === \"Anonymous\" && !dejaPosee){\r\n        dejaPosee = true;\r\n        reader[0].name = null;\r\n        reader[0].image = null;\r\n        reader[1].name = null;\r\n        reader[1].image = null;\r\n        reader[4].name = null;\r\n        reader[4].image = null;\r\n        carteEnJeu = [];\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}