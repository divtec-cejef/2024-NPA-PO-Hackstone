{"ast":null,"code":"import Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport io from \"socket.io-client\";\nexport default {\n  components: {\n    Case_1_Attaquant_Attaque,\n    Case_2_Attaquant_Attaque,\n    Case_3_Attaquant_Attaque\n  },\n  data() {\n    return {\n      readers: [{\n        id: 1,\n        name: 'Reader 1',\n        image: null\n      }, {\n        id: 2,\n        name: 'Reader 2',\n        image: null\n      }, {\n        id: 3,\n        name: 'Reader 3',\n        image: null\n      }, {\n        id: 4,\n        name: 'Reader 4',\n        image: null\n      }, {\n        id: 5,\n        name: 'Reader 5',\n        image: null\n      }, {\n        id: 6,\n        name: 'Reader 6',\n        image: null\n      }, {\n        id: 7,\n        name: 'Reader 7',\n        image: null\n      }],\n      card: {},\n      readerID: null\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      let {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        // Nettoie readerID pour enlever les caractères non numériques\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\n\n        console.log(\"Cleaned readerID:\", readerID); // Vérifie la valeur nettoyée\n\n        this.card = card;\n        this.card.image = card.image;\n        this.readerID = readerID;\n\n        // Convertir readerID en nombre\n        const readerIndex = this.readers.findIndex(r => r.id === Number(readerID));\n        console.log(\"Reader Index:\", readerIndex); // Vérifie l'index trouvé\n\n        if (readerIndex !== -1) {\n          this.readers[readerIndex] = {\n            ...this.readers[readerIndex],\n            image: card.image\n          };\n        }\n        console.log(\"Updated reader:\", this.readers[readerIndex]);\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Case_1_Attaquant_Attaque","Case_2_Attaquant_Attaque","Case_3_Attaquant_Attaque","io","components","data","readers","id","name","image","card","readerID","mounted","socket","on","type","replace","console","log","readerIndex","findIndex","r","Number"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"readers[2].id\" :image=\"readers[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"readers[3].id\" :image=\"readers[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"readers[5].id\" :image=\"readers[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  data() {\r\n    return {\r\n      readers: [\r\n        { id: 1, name: 'Reader 1', image: null},\r\n        { id: 2, name: 'Reader 2', image: null},\r\n        { id: 3, name: 'Reader 3', image: null},\r\n        { id: 4, name: 'Reader 4', image: null},\r\n        { id: 5, name: 'Reader 5', image: null},\r\n        { id: 6, name: 'Reader 6', image: null},\r\n        { id: 7, name: 'Reader 7', image: null},\r\n      ],\r\n      card: {},\r\n      readerID: null\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n        console.log(\"Cleaned readerID:\", readerID); // Vérifie la valeur nettoyée\r\n\r\n        this.card = card;\r\n        this.card.image = card.image;\r\n        this.readerID = readerID;\r\n\r\n        // Convertir readerID en nombre\r\n        const readerIndex = this.readers.findIndex(r => r.id === Number(readerID));\r\n        console.log(\"Reader Index:\", readerIndex); // Vérifie l'index trouvé\r\n\r\n        if (readerIndex !== -1) {\r\n          this.readers[readerIndex] = { ...this.readers[readerIndex], image: card.image };\r\n        }\r\n        console.log(\"Updated reader:\", this.readers[readerIndex]);\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":"AASA,OAAOA,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,EAAC,MAAO,kBAAkB;AAEjC,eAAe;EACbC,UAAU,EAAE;IACVJ,wBAAwB;IACxBC,wBAAwB;IACxBC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,CACP;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,EACvC;QAAEF,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAI,CAAC,CACxC;MACDC,IAAI,EAAE,CAAC,CAAC;MACRC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,MAAK,GAAIV,EAAE,CAAC,uBAAuB,CAAC;IAEzC,IAAI,CAACU,MAAM,CAACC,EAAE,CAAC,UAAU,EAAGT,IAAI,IAAK;MACnC,IAAI;QAAEM,QAAQ;QAAED;MAAK,IAAIL,IAAI;MAC7B,IAAIK,IAAI,CAACK,IAAG,KAAM,SAAS,EAAE;QAE3B;QACAJ,QAAO,GAAIA,QAAQ,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;;QAExCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEP,QAAQ,CAAC,EAAE;;QAE5C,IAAI,CAACD,IAAG,GAAIA,IAAI;QAChB,IAAI,CAACA,IAAI,CAACD,KAAI,GAAIC,IAAI,CAACD,KAAK;QAC5B,IAAI,CAACE,QAAO,GAAIA,QAAQ;;QAExB;QACA,MAAMQ,WAAU,GAAI,IAAI,CAACb,OAAO,CAACc,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACd,EAAC,KAAMe,MAAM,CAACX,QAAQ,CAAC,CAAC;QAC1EM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,WAAW,CAAC,EAAE;;QAE3C,IAAIA,WAAU,KAAM,CAAC,CAAC,EAAE;UACtB,IAAI,CAACb,OAAO,CAACa,WAAW,IAAI;YAAE,GAAG,IAAI,CAACb,OAAO,CAACa,WAAW,CAAC;YAAEV,KAAK,EAAEC,IAAI,CAACD;UAAM,CAAC;QACjF;QACAQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACZ,OAAO,CAACa,WAAW,CAAC,CAAC;MAC3D,OAAO;QACLF,OAAO,CAACC,GAAG,CAAC,0BAA0BR,IAAI,CAACK,IAAI,sDAAsD,CAAC;MACxG;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}