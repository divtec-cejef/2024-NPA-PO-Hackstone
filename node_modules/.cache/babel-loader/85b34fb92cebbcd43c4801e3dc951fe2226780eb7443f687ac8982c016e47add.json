{"ast":null,"code":"import Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport io from \"socket.io-client\";\nimport plateauFinaleAttaquant from \"@/components/plateauAttaque/PlateauFinaleAttaquant.vue\";\nexport default {\n  components: {\n    Case_1_Attaquant_Attaque,\n    Case_2_Attaquant_Attaque,\n    Case_3_Attaquant_Attaque\n  },\n  data() {\n    return {\n      chat: plateauFinaleAttaquant.data().readers,\n      card: {},\n      readerID: null\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      let {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        // Nettoie readerID pour enlever les caractères non numériques\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\n\n        this.card = card;\n        this.card.image = card.image;\n        this.readerID = readerID;\n\n        // Convertir readerID en nombre\n        const readerIndex = this.chat.findIndex(r => r.id === Number(readerID));\n        if (readerIndex !== -1) {\n          this.chat[readerIndex] = {\n            ...this.chat[readerIndex],\n            image: card.image\n          };\n        }\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Case_1_Attaquant_Attaque","Case_2_Attaquant_Attaque","Case_3_Attaquant_Attaque","io","plateauFinaleAttaquant","components","data","chat","readers","card","readerID","mounted","socket","on","type","replace","image","readerIndex","findIndex","r","id","Number","console","log"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"chat[2].id\" :image=\"chat[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"chat[3].id\" :image=\"chat[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"chat[5].id\" :image=\"chat[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\nimport plateauFinaleAttaquant from \"@/components/plateauAttaque/PlateauFinaleAttaquant.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  data() {\r\n    return {\r\n      chat: plateauFinaleAttaquant.data().readers,\r\n      card: {},\r\n      readerID: null\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n        this.card = card;\r\n        this.card.image = card.image;\r\n        this.readerID = readerID;\r\n\r\n        // Convertir readerID en nombre\r\n        const readerIndex = this.chat.findIndex(r => r.id === Number(readerID));\r\n\r\n        if (readerIndex !== -1) {\r\n          this.chat[readerIndex] = { ...this.chat[readerIndex], image: card.image };\r\n        }\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":"AASA,OAAOA,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,EAAC,MAAO,kBAAkB;AACjC,OAAOC,sBAAqB,MAAO,wDAAwD;AAE3F,eAAe;EACbC,UAAU,EAAE;IACVL,wBAAwB;IACxBC,wBAAwB;IACxBC;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAEH,sBAAsB,CAACE,IAAI,CAAC,CAAC,CAACE,OAAO;MAC3CC,IAAI,EAAE,CAAC,CAAC;MACRC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,MAAK,GAAIT,EAAE,CAAC,uBAAuB,CAAC;IAEzC,IAAI,CAACS,MAAM,CAACC,EAAE,CAAC,UAAU,EAAGP,IAAI,IAAK;MACnC,IAAI;QAAEI,QAAQ;QAAED;MAAK,IAAIH,IAAI;MAC7B,IAAIG,IAAI,CAACK,IAAG,KAAM,SAAS,EAAE;QAE3B;QACAJ,QAAO,GAAIA,QAAQ,CAACK,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;;QAExC,IAAI,CAACN,IAAG,GAAIA,IAAI;QAChB,IAAI,CAACA,IAAI,CAACO,KAAI,GAAIP,IAAI,CAACO,KAAK;QAC5B,IAAI,CAACN,QAAO,GAAIA,QAAQ;;QAExB;QACA,MAAMO,WAAU,GAAI,IAAI,CAACV,IAAI,CAACW,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMC,MAAM,CAACX,QAAQ,CAAC,CAAC;QAEvE,IAAIO,WAAU,KAAM,CAAC,CAAC,EAAE;UACtB,IAAI,CAACV,IAAI,CAACU,WAAW,IAAI;YAAE,GAAG,IAAI,CAACV,IAAI,CAACU,WAAW,CAAC;YAAED,KAAK,EAAEP,IAAI,CAACO;UAAM,CAAC;QAC3E;MACF,OAAO;QACLM,OAAO,CAACC,GAAG,CAAC,0BAA0Bd,IAAI,CAACK,IAAI,sDAAsD,CAAC;MACxG;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}