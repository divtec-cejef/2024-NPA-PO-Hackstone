{"ast":null,"code":"import Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\nimport io from \"socket.io-client\";\nexport default {\n  components: {\n    Case_1_Attaquant_Attaque,\n    Case_2_Attaquant_Attaque,\n    Case_3_Attaquant_Attaque\n  },\n  props: {\n    readers: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      card: {}\n    };\n  },\n  mounted() {\n    this.socket = io('http://localhost:3000');\n    this.socket.on('rfidData', data => {\n      let {\n        readerID,\n        card\n      } = data;\n      if (card.type === 'attaque') {\n        // Nettoie readerID pour enlever les caractères non numériques\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\n\n        const reader = this.readers.find(r => r.id === readerID);\n        console.log(\"reader.id \", reader.id);\n        if (reader.id === '3' || reader.id === '4' || reader.id === '6') {\n          reader.image = card.image;\n          let newReaders = [...this.readers]; // Copie des readers\n          console.log(\"nouveau reader\", newReaders);\n          this.$emit('update-readers', newReaders);\n          console.log(\"this.reader, \", this.readers);\n        }\n      } else {\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\n      }\n    });\n  }\n};","map":{"version":3,"names":["Case_1_Attaquant_Attaque","Case_2_Attaquant_Attaque","Case_3_Attaquant_Attaque","io","components","props","readers","type","Array","required","data","card","mounted","socket","on","readerID","replace","reader","find","r","id","console","log","image","newReaders","$emit"],"sources":["C:\\Users\\courluc\\IdeaProjects\\2024-NPA-PO-Hackstone\\src\\components\\plateauAttaque\\Case_attaquant\\CaseAttaquant_attaque.vue"],"sourcesContent":["<template>\r\n  <div class=\"bottomReaders_attaque\">\r\n    <Case_1_Attaquant_Attaque :id=\"readers[2].id\" :image=\"readers[2].image\"/>\r\n    <Case_2_Attaquant_Attaque :id=\"readers[3].id\" :image=\"readers[3].image\"/>\r\n    <Case_3_Attaquant_Attaque :id=\"readers[5].id\" :image=\"readers[5].image\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Case_1_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_2_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport Case_3_Attaquant_Attaque from \"@/components/plateauAttaque/Case_attaquant/Case_1_Attaquant_Attaque.vue\";\r\nimport io from \"socket.io-client\";\r\n\r\nexport default {\r\n  components: {\r\n    Case_1_Attaquant_Attaque,\r\n    Case_2_Attaquant_Attaque,\r\n    Case_3_Attaquant_Attaque\r\n  },\r\n  props: {\r\n    readers: {\r\n      type: Array,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      card: {}\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.socket = io('http://localhost:3000');\r\n\r\n    this.socket.on('rfidData', (data) => {\r\n      let { readerID, card } = data;\r\n      if (card.type === 'attaque') {\r\n\r\n        // Nettoie readerID pour enlever les caractères non numériques\r\n        readerID = readerID.replace(/\\D/g, ''); // Garde seulement les chiffres\r\n\r\n\r\n\r\n        const reader = this.readers.find(r => r.id === readerID);\r\n\r\n        console.log(\"reader.id \", reader.id)\r\n\r\n        if (reader.id === '3' || reader.id === '4' || reader.id === '6'){\r\n\r\n          reader.image = card.image;\r\n\r\n          let newReaders = [...this.readers]; // Copie des readers\r\n          console.log(\"nouveau reader\", newReaders);\r\n          this.$emit('update-readers', newReaders);\r\n          console.log(\"this.reader, \", this.readers);\r\n        }\r\n\r\n      } else {\r\n        console.log(`Carte non valide: type ${card.type}. Seules les cartes de type attaque sont autorisées.`);\r\n      }\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.bottomReaders_attaque {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 147px;\r\n}\r\n</style>\r\n"],"mappings":"AASA,OAAOA,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,wBAAuB,MAAO,yEAAyE;AAC9G,OAAOC,EAAC,MAAO,kBAAkB;AAEjC,eAAe;EACbC,UAAU,EAAE;IACVJ,wBAAwB;IACxBC,wBAAwB;IACxBC;EACF,CAAC;EACDG,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,KAAK;MACXC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC;IACT;EACF,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,MAAK,GAAIV,EAAE,CAAC,uBAAuB,CAAC;IAEzC,IAAI,CAACU,MAAM,CAACC,EAAE,CAAC,UAAU,EAAGJ,IAAI,IAAK;MACnC,IAAI;QAAEK,QAAQ;QAAEJ;MAAK,IAAID,IAAI;MAC7B,IAAIC,IAAI,CAACJ,IAAG,KAAM,SAAS,EAAE;QAE3B;QACAQ,QAAO,GAAIA,QAAQ,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;;QAIxC,MAAMC,MAAK,GAAI,IAAI,CAACX,OAAO,CAACY,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAML,QAAQ,CAAC;QAExDM,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,MAAM,CAACG,EAAE;QAEnC,IAAIH,MAAM,CAACG,EAAC,KAAM,GAAE,IAAKH,MAAM,CAACG,EAAC,KAAM,GAAE,IAAKH,MAAM,CAACG,EAAC,KAAM,GAAG,EAAC;UAE9DH,MAAM,CAACM,KAAI,GAAIZ,IAAI,CAACY,KAAK;UAEzB,IAAIC,UAAS,GAAI,CAAC,GAAG,IAAI,CAAClB,OAAO,CAAC,EAAE;UACpCe,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,UAAU,CAAC;UACzC,IAAI,CAACC,KAAK,CAAC,gBAAgB,EAAED,UAAU,CAAC;UACxCH,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAChB,OAAO,CAAC;QAC5C;MAEF,OAAO;QACLe,OAAO,CAACC,GAAG,CAAC,0BAA0BX,IAAI,CAACJ,IAAI,sDAAsD,CAAC;MACxG;IACF,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}